Backend Fase 1 (DRF + JWT + Spectacular)
0) Reglas globales (OBLIGATORIAS)

Objetivo: Implementar Fase 1 solamente (Auth, Workspace mínimo, Modeling snapshot-first, Diagram Lock, Telemetry básico).

Stack: Django 4+, DRF, drf-spectacular, SimpleJWT, Postgres/Neon.

Código/estilo:

Código en inglés, comentarios/docstrings en español.

Cumplir PEP 8. Usar Black (88), Ruff, isort (pre-commit).

Type hints donde ayuden (serializers/services).

Diseño DRY: serializers/viewsets/urls por app; permisos/validaciones en capas claras (permissions/services/validators).

OpenAPI: cada endpoint con descripción y ejemplos (drf-spectacular).

Paginación DRF en listados (?page=…&page_size=…).

Formato de error (uniforme):

{ "code": "validation_error", "message": "…", "details": { "field": "…" } }


Seguridad/Scope: JWT + pertenencia a organización/proyecto; roles mínimos por acción (ver matriz).

1) Alcance Fase 1

Auth: login/refresh.

Workspace: crear/listar/obtener Organization y Project.

Modeling: Diagram (CRUD mínimo) y DiagramVersion (guardar snapshot + listar + restaurar).

Collaboration: Diagram Lock (edición exclusiva con TTL).

Telemetry: registrar Event en acciones clave (sin UI; endpoint de lectura opcional).

2) Matriz de permisos (mínima)

Organizations: crear = Authenticated; listar/obtener = miembro (owner/admin/editor/viewer).

Projects: crear = miembro de la Organization (owner/admin/editor); leer = cualquier miembro del proyecto.

Diagrams: crear/editar/eliminar = miembro del proyecto (editor+); leer = cualquier miembro del proyecto.

DiagramVersions: crear/restaurar = editor+; listar = cualquier miembro del proyecto.

Locks: crear/renovar/eliminar = editor+; leer = miembros del proyecto.

3) Casos de uso y endpoints (con contrato)

Para cada endpoint: implementar serializer, viewset/action, permissions, tests (happy-path + 1 error).

3.1 Autenticación (accounts)
A01 — Obtener token JWT

POST /api/auth/token/ → { "access": "...", "refresh": "..." }
Inputs: { "username": "…", "password": "…" }
Permisos: público
Tests: login OK (200); credenciales inválidas (401).

A02 — Refrescar token

POST /api/auth/token/refresh/ → { "access": "..." }
Inputs: { "refresh": "…" }
Permisos: público
Tests: refresh OK; refresh inválido/expirado (401).

3.2 Workspace (organizations & projects)
W01 — Crear organización

POST /api/organizations/ → 201 { id, name, slug, created_at }
Body: { "name": "Acme", "slug": "acme" }
Permisos: IsAuthenticated
Validaciones: slug único.
Tests: crea OK; slug duplicado (400).

W02 — Listar mis organizaciones

GET /api/organizations/ → 200 [ … ]
Query: ?search=… (opcional)
Permisos: IsAuthenticated
Tests: lista solo orgs donde el usuario es miembro.

W03 — Obtener organización por id

GET /api/organizations/{id}/ → 200 { … }
Permisos: miembro
Tests: acceso fuera de tenant (403/404).

W04 — Crear proyecto

POST /api/projects/ → 201 { id, organization, name, key, created_at }
Body: { "organization": "<uuid>", "name": "Modeler", "key": "MOD", "is_private": false }
Permisos: miembro de la org (owner/admin/editor)
Validaciones: (organization,key) único.
Tests: crea OK; key duplicado en misma org (400); user sin membership (403).

W05 — Listar proyectos de una org

GET /api/projects/?organization=<uuid> → 200 [ … ]
Permisos: miembro de la org
Tests: solo los del scope.

W06 — Obtener proyecto por id

GET /api/projects/{id}/ → 200 { … }
Permisos: miembro del proyecto
Tests: 403 si no pertenece.

(PATCH/DELETE de org/project quedan fuera de Fase 1.)

3.3 Modeling (snapshot-first)
M01 — Crear diagrama

POST /api/diagrams/ → 201 { id, project, name, current_version, created_by, created_at }
Body: { "project": "<uuid>", "name": "Initial diagram" }
Permisos: miembro del proyecto (editor+)
Validaciones: (project,name) único.
Tests: crea OK; nombre duplicado (400); no miembro (403).

M02 — Listar diagramas del proyecto

GET /api/diagrams/?project=<uuid> → 200 [ … ]
Permisos: miembro del proyecto
Tests: sólo del proyecto; paginación.

M03 — Obtener/renombrar/eliminar (soft)

GET /api/diagrams/{id}/ → 200 { … }

PATCH /api/diagrams/{id}/ (rename) → 200 { … }
Body: { "name": "…" }

DELETE /api/diagrams/{id}/ → 204 (soft delete)
Permisos: editor+
Tests: rename OK; delete marca deleted_at; no miembro (403).

M04 — Guardar versión (snapshot)

POST /api/diagram-versions/ → 201 { id, diagram, version_number, created_by, created_at }
Body (ejemplo):

{
  "diagram": "<uuid>",
  "message": "Initial snapshot",
  "snapshot": {
    "classes": {
      "C1": {
        "id": "C1",
        "name": "User",
        "visibility": "PUBLIC",
        "position": {"x":120,"y":80},
        "size": {"w":200,"h":80},
        "attributes": [{
          "id":"A1","name":"id","typeName":"Long",
          "isRequired":true,"isPrimaryKey":true,"position":0
        }]
      }
    },
    "relations": {},
    "enums": {}
  }
}


Permisos: editor+
Validaciones (servidor):

Herencia: si kind="INHERITANCE" ⇒ name=null, isBidirectional=false, multiplicidades 1↔1.

Atributos: si isPrimaryKey=true ⇒ isRequired=true.

Unicidad: nombres de clase únicos en el diagrama; atributos únicos por clase.
Efecto: incrementa version_number y actualiza diagram.current_version.
Tests: create OK; violación de herencia (400); PK sin required (400).

M05 — Listar versiones de un diagrama

GET /api/diagrams/{id}/versions/ → 200 [ { id, version_number, message, created_at } ]
Permisos: cualquier miembro del proyecto
Tests: orden desc por created_at o version_number.

M06 — Restaurar una versión

POST /api/diagram-versions/{id}/restore/ → 200 { "restored": true, "diagram": "<uuid>", "version_number": N }
Permisos: editor+
Efecto: rehidrata el estado vivo del diagrama desde snapshot.
Tests: restore OK; versión no pertenece al proyecto (404/403).

3.4 Collaboration — Diagram Lock (TTL 60s)
C01 — Crear lock

POST /api/diagrams/{id}/lock/ → 200 { "lock_owner": "<user_id>", "expires_at": "<iso>" }
Permisos: editor+
Reglas: si existe lock vigente y el solicitante no es el dueño → 409 conflict.
Tests: lock OK; conflicto 409.

C02 — Renovar lock

POST /api/diagrams/{id}/lock/renew/ → 200 { "expires_at": "<iso>" }
Permisos: sólo el dueño del lock
Tests: renovar OK; no dueño (403).

C03 — Ver estado del lock

GET /api/diagrams/{id}/lock/ → 200 { "locked": true|false, "lock_owner": "...", "expires_at": "<iso>|null" }
Permisos: miembro del proyecto
Tests: lectura OK.

C04 — Liberar lock

DELETE /api/diagrams/{id}/lock/ → 204
Permisos: dueño del lock o admin/owner del proyecto
Tests: libera OK; intentar liberar sin ser dueño (403).

3.5 Telemetry — eventos mínimos
T01 — Registrar eventos (interno)

Hook interno en servicios: diagram_created, version_saved, version_restored
Modelo: telemetry.Event(type, user, project, diagram, payload, ts)
Tests: se crea Event al guardar/restaurar.

T02 — (Opcional P1) Listar eventos por diagrama

GET /api/events/?diagram=<uuid> → 200 [ … ]
Permisos: miembro del proyecto
Tests: filtrado por diagrama.

4) Validaciones y respuestas

Herencia:

❌ 400 {"code":"validation_error","message":"Invalid inheritance","details":{"relation":"name must be null; multiplicity must be 1..1; bidirectional=false"}}

Lock conflict:

❌ 409 {"code":"lock_conflict","message":"Diagram is locked by @user until …"}

Scope/tenant: 403 con mensaje claro si el usuario no es miembro.

5) Tests (pytest) — checklist mínimo por recurso

Auth: login ok/ko, refresh ok/ko.

Organizations: create ok; slug duplicado.

Projects: create ok; key duplicado; user fuera de org.

Diagrams: create/list/get/patch/delete; dup name.

Versions: create (verifica incremento y current_version), listar, restore (ok/forbidden).

Locks: crear (ok/409), renovar (ok/403), get, delete (ok/403).

Telemetry: Event creado en guardar/restaurar.

6) Entregables del agente

Serializers, viewsets/actions, urls, permissions, validators/services, tests.

OpenAPI completo con ejemplos (/api/schema/, /api/docs/).

Comandos de verificación:

python manage.py makemigrations && python manage.py migrate
pytest -q
