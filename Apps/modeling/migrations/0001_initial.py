# Generated by Django 5.2.1 on 2025-09-09 17:21

import django.contrib.postgres.indexes
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('workspace', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Diagram',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Identificador único universal', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Fecha y hora de creación')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Fecha y hora de última actualización')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Fecha y hora de borrado lógico', null=True)),
                ('name', models.CharField(help_text='Nombre del diagrama', max_length=120)),
                ('created_by', models.ForeignKey(help_text='Usuario que creó el diagrama', on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(help_text='Proyecto que contiene el diagrama', on_delete=django.db.models.deletion.RESTRICT, to='workspace.project')),
            ],
        ),
        migrations.CreateModel(
            name='DiagramVersion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Identificador único universal', primary_key=True, serialize=False)),
                ('version_number', models.IntegerField(help_text='Número de versión secuencial')),
                ('snapshot', models.JSONField(help_text='Estado completo del diagrama en JSON')),
                ('message', models.CharField(blank=True, help_text='Mensaje descriptivo de la versión', max_length=240, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Fecha de creación de la versión')),
                ('created_by', models.ForeignKey(help_text='Usuario que creó la versión', on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
                ('diagram', models.ForeignKey(help_text='Diagrama versionado', on_delete=django.db.models.deletion.RESTRICT, to='modeling.diagram')),
            ],
        ),
        migrations.AddField(
            model_name='diagram',
            name='current_version',
            field=models.ForeignKey(blank=True, help_text='Versión actual del diagrama', null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='current_for_diagrams', to='modeling.diagramversion'),
        ),
        migrations.CreateModel(
            name='EnumType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Identificador único universal', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Nombre del tipo enumerado', max_length=120)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Fecha de creación del enum')),
                ('diagram', models.ForeignKey(help_text='Diagrama que contiene el enum', on_delete=django.db.models.deletion.RESTRICT, to='modeling.diagram')),
            ],
        ),
        migrations.CreateModel(
            name='EnumValue',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Identificador único universal', primary_key=True, serialize=False)),
                ('literal', models.CharField(help_text='Literal del valor enumerado', max_length=120)),
                ('ordinal', models.IntegerField(help_text='Posición ordinal dentro del enum')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Fecha de creación del valor')),
                ('enum_type', models.ForeignKey(help_text='Tipo enumerado que contiene este valor', on_delete=django.db.models.deletion.CASCADE, to='modeling.enumtype')),
            ],
        ),
        migrations.CreateModel(
            name='ModelClass',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Identificador único universal', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Fecha y hora de creación')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Fecha y hora de última actualización')),
                ('name', models.CharField(help_text='Nombre de la clase', max_length=120)),
                ('stereotype', models.CharField(blank=True, help_text='Estereotipo UML de la clase', max_length=32, null=True)),
                ('visibility', models.CharField(choices=[('PUBLIC', 'Público'), ('PRIVATE', 'Privado'), ('PROTECTED', 'Protegido'), ('PACKAGE', 'Paquete')], help_text='Visibilidad de la clase', max_length=10)),
                ('x', models.IntegerField(help_text='Posición X en el lienzo')),
                ('y', models.IntegerField(help_text='Posición Y en el lienzo')),
                ('width', models.IntegerField(help_text='Ancho de la clase en el lienzo')),
                ('height', models.IntegerField(help_text='Alto de la clase en el lienzo')),
                ('diagram', models.ForeignKey(help_text='Diagrama que contiene la clase', on_delete=django.db.models.deletion.RESTRICT, to='modeling.diagram')),
            ],
        ),
        migrations.CreateModel(
            name='ModelAttribute',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Identificador único universal', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Fecha y hora de creación')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Fecha y hora de última actualización')),
                ('name', models.CharField(help_text='Nombre del atributo', max_length=120)),
                ('type_name', models.CharField(help_text='Tipo de dato del atributo', max_length=120)),
                ('is_required', models.BooleanField(help_text='Si el atributo es obligatorio')),
                ('is_primary_key', models.BooleanField(help_text='Si el atributo es clave primaria')),
                ('length', models.IntegerField(blank=True, help_text='Longitud máxima (para strings)', null=True)),
                ('precision', models.IntegerField(blank=True, help_text='Precisión (para decimales)', null=True)),
                ('scale', models.IntegerField(blank=True, help_text='Escala (para decimales)', null=True)),
                ('default_value', models.CharField(blank=True, help_text='Valor por defecto', max_length=255, null=True)),
                ('visibility', models.CharField(choices=[('PUBLIC', 'Público'), ('PRIVATE', 'Privado'), ('PROTECTED', 'Protegido'), ('PACKAGE', 'Paquete')], help_text='Visibilidad del atributo', max_length=10)),
                ('position', models.IntegerField(help_text='Posición dentro de la clase')),
                ('model_class', models.ForeignKey(help_text='Clase que contiene el atributo', on_delete=django.db.models.deletion.CASCADE, to='modeling.modelclass')),
            ],
        ),
        migrations.CreateModel(
            name='ModelMethod',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Identificador único universal', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Nombre del método', max_length=120)),
                ('return_type', models.CharField(help_text='Tipo de retorno del método', max_length=120)),
                ('visibility', models.CharField(choices=[('PUBLIC', 'Público'), ('PRIVATE', 'Privado'), ('PROTECTED', 'Protegido'), ('PACKAGE', 'Paquete')], help_text='Visibilidad del método', max_length=10)),
                ('parameters', models.JSONField(help_text='Parámetros del método en formato JSON')),
                ('position', models.IntegerField(help_text='Posición dentro de la clase')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Fecha de creación del método')),
                ('model_class', models.ForeignKey(help_text='Clase que contiene el método', on_delete=django.db.models.deletion.CASCADE, to='modeling.modelclass')),
            ],
        ),
        migrations.CreateModel(
            name='ModelRelation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Identificador único universal', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Fecha y hora de creación')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Fecha y hora de última actualización')),
                ('name', models.CharField(blank=True, help_text='Nombre de la relación', max_length=120, null=True)),
                ('relation_kind', models.CharField(choices=[('ASSOCIATION', 'Asociación'), ('AGGREGATION', 'Agregación'), ('COMPOSITION', 'Composición'), ('INHERITANCE', 'Herencia')], help_text='Tipo de relación UML', max_length=12)),
                ('source_multiplicity', models.CharField(help_text='Multiplicidad del lado origen', max_length=16)),
                ('target_multiplicity', models.CharField(help_text='Multiplicidad del lado destino', max_length=16)),
                ('source_role', models.CharField(blank=True, help_text='Rol del lado origen', max_length=64, null=True)),
                ('target_role', models.CharField(blank=True, help_text='Rol del lado destino', max_length=64, null=True)),
                ('is_bidirectional', models.BooleanField(default=False, help_text='Si la relación es bidireccional')),
                ('diagram', models.ForeignKey(help_text='Diagrama que contiene la relación', on_delete=django.db.models.deletion.RESTRICT, to='modeling.diagram')),
                ('source_class', models.ForeignKey(help_text='Clase origen de la relación', on_delete=django.db.models.deletion.RESTRICT, related_name='outgoing_relations', to='modeling.modelclass')),
                ('target_class', models.ForeignKey(help_text='Clase destino de la relación', on_delete=django.db.models.deletion.RESTRICT, related_name='incoming_relations', to='modeling.modelclass')),
            ],
        ),
        migrations.AddIndex(
            model_name='diagramversion',
            index=models.Index(fields=['diagram'], name='modeling_di_diagram_00199e_idx'),
        ),
        migrations.AddIndex(
            model_name='diagramversion',
            index=django.contrib.postgres.indexes.GinIndex(fields=['snapshot'], name='modeling_di_snapsho_26d6bc_gin'),
        ),
        migrations.AddConstraint(
            model_name='diagramversion',
            constraint=models.UniqueConstraint(fields=('diagram', 'version_number'), name='unique_diagram_version_number'),
        ),
        migrations.AddIndex(
            model_name='diagram',
            index=models.Index(fields=['project'], name='modeling_di_project_9b934e_idx'),
        ),
        migrations.AddConstraint(
            model_name='diagram',
            constraint=models.UniqueConstraint(fields=('project', 'name'), name='unique_project_diagram_name'),
        ),
        migrations.AddConstraint(
            model_name='enumtype',
            constraint=models.UniqueConstraint(fields=('diagram', 'name'), name='unique_diagram_enum_name'),
        ),
        migrations.AddConstraint(
            model_name='enumvalue',
            constraint=models.UniqueConstraint(fields=('enum_type', 'literal'), name='unique_enum_literal'),
        ),
        migrations.AddIndex(
            model_name='modelclass',
            index=models.Index(fields=['diagram'], name='modeling_mo_diagram_b3ec15_idx'),
        ),
        migrations.AddConstraint(
            model_name='modelclass',
            constraint=models.UniqueConstraint(fields=('diagram', 'name'), name='unique_diagram_class_name'),
        ),
        migrations.AddConstraint(
            model_name='modelattribute',
            constraint=models.UniqueConstraint(fields=('model_class', 'name'), name='unique_class_attribute_name'),
        ),
        migrations.AddConstraint(
            model_name='modelattribute',
            constraint=models.CheckConstraint(condition=models.Q(('is_primary_key', False), ('is_required', True), _connector='OR'), name='attr_pk_implies_required'),
        ),
        migrations.AddConstraint(
            model_name='modelmethod',
            constraint=models.UniqueConstraint(fields=('model_class', 'name'), name='unique_class_method_name'),
        ),
        migrations.AddIndex(
            model_name='modelrelation',
            index=models.Index(fields=['diagram'], name='modeling_mo_diagram_b59505_idx'),
        ),
        migrations.AddIndex(
            model_name='modelrelation',
            index=models.Index(fields=['source_class'], name='modeling_mo_source__cdd9b2_idx'),
        ),
        migrations.AddIndex(
            model_name='modelrelation',
            index=models.Index(fields=['target_class'], name='modeling_mo_target__480a15_idx'),
        ),
        migrations.AddConstraint(
            model_name='modelrelation',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('is_bidirectional', False), ('name__isnull', True), ('relation_kind', 'INHERITANCE')), models.Q(('relation_kind', 'INHERITANCE'), _negated=True), _connector='OR'), name='inheritance_rules'),
        ),
    ]
